#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Imperial
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="IMPERIAL")]
	public partial class imperialDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definiciones de métodos de extensibilidad
    partial void OnCreated();
    partial void InsertNave(Nave instance);
    partial void UpdateNave(Nave instance);
    partial void DeleteNave(Nave instance);
    partial void InsertTipoNave(TipoNave instance);
    partial void UpdateTipoNave(TipoNave instance);
    partial void DeleteTipoNave(TipoNave instance);
    #endregion
		
		public imperialDataContext() : 
				base(global::Imperial.Properties.Settings.Default.IMPERIALConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public imperialDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public imperialDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public imperialDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public imperialDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Nave> Nave
		{
			get
			{
				return this.GetTable<Nave>();
			}
		}
		
		public System.Data.Linq.Table<TipoNave> TipoNave
		{
			get
			{
				return this.GetTable<TipoNave>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Nave")]
	public partial class Nave : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Nombre;
		
		private string _Capitan;
		
		private string _PlanetaFabricacion;
		
		private System.Nullable<int> _TipoNaveCodigo;
		
		private EntityRef<TipoNave> _TipoNave;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnCapitanChanging(string value);
    partial void OnCapitanChanged();
    partial void OnPlanetaFabricacionChanging(string value);
    partial void OnPlanetaFabricacionChanged();
    partial void OnTipoNaveCodigoChanging(System.Nullable<int> value);
    partial void OnTipoNaveCodigoChanged();
    #endregion
		
		public Nave()
		{
			this._TipoNave = default(EntityRef<TipoNave>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nombre", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Capitan", DbType="VarChar(50)")]
		public string Capitan
		{
			get
			{
				return this._Capitan;
			}
			set
			{
				if ((this._Capitan != value))
				{
					this.OnCapitanChanging(value);
					this.SendPropertyChanging();
					this._Capitan = value;
					this.SendPropertyChanged("Capitan");
					this.OnCapitanChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanetaFabricacion", DbType="VarChar(50)")]
		public string PlanetaFabricacion
		{
			get
			{
				return this._PlanetaFabricacion;
			}
			set
			{
				if ((this._PlanetaFabricacion != value))
				{
					this.OnPlanetaFabricacionChanging(value);
					this.SendPropertyChanging();
					this._PlanetaFabricacion = value;
					this.SendPropertyChanged("PlanetaFabricacion");
					this.OnPlanetaFabricacionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TipoNaveCodigo", DbType="Int")]
		public System.Nullable<int> TipoNaveCodigo
		{
			get
			{
				return this._TipoNaveCodigo;
			}
			set
			{
				if ((this._TipoNaveCodigo != value))
				{
					if (this._TipoNave.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTipoNaveCodigoChanging(value);
					this.SendPropertyChanging();
					this._TipoNaveCodigo = value;
					this.SendPropertyChanged("TipoNaveCodigo");
					this.OnTipoNaveCodigoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TipoNave_Nave", Storage="_TipoNave", ThisKey="TipoNaveCodigo", OtherKey="Codigo", IsForeignKey=true)]
		public TipoNave TipoNave
		{
			get
			{
				return this._TipoNave.Entity;
			}
			set
			{
				TipoNave previousValue = this._TipoNave.Entity;
				if (((previousValue != value) 
							|| (this._TipoNave.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TipoNave.Entity = null;
						previousValue.Nave.Remove(this);
					}
					this._TipoNave.Entity = value;
					if ((value != null))
					{
						value.Nave.Add(this);
						this._TipoNaveCodigo = value.Codigo;
					}
					else
					{
						this._TipoNaveCodigo = default(Nullable<int>);
					}
					this.SendPropertyChanged("TipoNave");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TipoNave")]
	public partial class TipoNave : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Codigo;
		
		private string _Denominacion;
		
		private System.Nullable<double> _Longitud;
		
		private System.Nullable<int> _NumTripulantes;
		
		private EntitySet<Nave> _Nave;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodigoChanging(int value);
    partial void OnCodigoChanged();
    partial void OnDenominacionChanging(string value);
    partial void OnDenominacionChanged();
    partial void OnLongitudChanging(System.Nullable<double> value);
    partial void OnLongitudChanged();
    partial void OnNumTripulantesChanging(System.Nullable<int> value);
    partial void OnNumTripulantesChanged();
    #endregion

    public override string ToString()
    {
        return this._Denominacion;
    }
		
		public TipoNave()
		{
			this._Nave = new EntitySet<Nave>(new Action<Nave>(this.attach_Nave), new Action<Nave>(this.detach_Nave));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Codigo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Codigo
		{
			get
			{
				return this._Codigo;
			}
			set
			{
				if ((this._Codigo != value))
				{
					this.OnCodigoChanging(value);
					this.SendPropertyChanging();
					this._Codigo = value;
					this.SendPropertyChanged("Codigo");
					this.OnCodigoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Denominacion", DbType="VarChar(50)")]
		public string Denominacion
		{
			get
			{
				return this._Denominacion;
			}
			set
			{
				if ((this._Denominacion != value))
				{
					this.OnDenominacionChanging(value);
					this.SendPropertyChanging();
					this._Denominacion = value;
					this.SendPropertyChanged("Denominacion");
					this.OnDenominacionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longitud", DbType="Float")]
		public System.Nullable<double> Longitud
		{
			get
			{
				return this._Longitud;
			}
			set
			{
				if ((this._Longitud != value))
				{
					this.OnLongitudChanging(value);
					this.SendPropertyChanging();
					this._Longitud = value;
					this.SendPropertyChanged("Longitud");
					this.OnLongitudChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumTripulantes", DbType="Int")]
		public System.Nullable<int> NumTripulantes
		{
			get
			{
				return this._NumTripulantes;
			}
			set
			{
				if ((this._NumTripulantes != value))
				{
					this.OnNumTripulantesChanging(value);
					this.SendPropertyChanging();
					this._NumTripulantes = value;
					this.SendPropertyChanged("NumTripulantes");
					this.OnNumTripulantesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TipoNave_Nave", Storage="_Nave", ThisKey="Codigo", OtherKey="TipoNaveCodigo")]
		public EntitySet<Nave> Nave
		{
			get
			{
				return this._Nave;
			}
			set
			{
				this._Nave.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Nave(Nave entity)
		{
			this.SendPropertyChanging();
			entity.TipoNave = this;
		}
		
		private void detach_Nave(Nave entity)
		{
			this.SendPropertyChanging();
			entity.TipoNave = null;
		}
	}
}
#pragma warning restore 1591
